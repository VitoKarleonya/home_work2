from collections import deque
#тут импортируется специальные методы для поиска в ширину
#инициируется переменная очередь в которой будет начальная вершина
def bfs(graph, start):
    visited = set()
    queue = deque([start])
    #пока в очереди есть элементы выполняется цкил

    while queue:
        #инициализируется переменная в которой идет поиск ближайших вершин к текущей
        vertex = queue.popleft()
        #если эти вершины в непосещеных выполнить условия
        if vertex not in visited:
            #добавляем в посещенные
            visited.add(vertex)
            #вычитаем множество посещенных из множеств что сейчас в очереди(соседние вершины), если все правильно понял
            queue.extend(graph[vertex] - visited)
    return visited
    #после цикла возвращаем все посещеные в порядке посещения

#Граф из множеств
graph = {
    '0': set(['1', '2']),
    '1': set(['0', '3', '4']),
    '2': set(['0']),
    '3': set(['1']),
    '4': set(['2', '3'])
}

print(bfs(graph, '3'))
